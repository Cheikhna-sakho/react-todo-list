import React, { useEffect, useRef, useState } from 'react'
import { RiArrowGoBackLine, RiArrowGoForwardLine } from "react-icons/ri";
import { pngTask } from '../api/task.api';
import { TaskDataContext } from '../contexts/TaskContext';
// import { activeClass } from '../utils/activeClass';
const Pagination = (data, { start = 0, ratio = 4 } = {}) => {
    const { count, setShowTask } = TaskDataContext();
    const [page, setPage] = React.useState(start);

    const [pageIndex, SetPageIndex] = React.useState(1);
    const [index, setIndex] = React.useState(page);
    const [end, setEnd] = React.useState(null);

    React.useEffect(() => {
        const lastValue = () => {
            const endVal = (page + ratio);
            const len = data && count;
            return len > endVal ? endVal - len : null;
        }
        setEnd(lastValue());
    }, [data, ratio, page])
    React.useEffect(() => {
        if (index > 0) {
            setPage(0);
            SetPageIndex(index / index);
        } else {
            SetPageIndex(0);
        }
        console.log();
    }, [data, index])
    React.useEffect(() => {
        data && setIndex(Math.ceil(count / ratio))
        data && setShowTask(end ? (
            data.slice(page, end)
        ) : data.slice(page));
    }, [data, page, end, ratio])

    const next = () => {
        if (count >= page + ratio) {
            SetPageIndex(pageIndex + 1)
            setPage(page + ratio)
        }
    }
    const back = () => {
        if (page - ratio >= 0) {
            SetPageIndex(pageIndex - 1)
            setPage(page - ratio)
        }
    }
    return { next, back, index, pageIndex,page,setPage,end };
}
// export default Pagination;

export const PageItem = () => {
    const { count, task, setShowTask } = TaskDataContext();
    const { next, back, index, pageIndex,page,setPage ,end} = Pagination(task, { ratio: 10 });
    const pageItem = useRef([]);

    useEffect(() => {
        const currentEl = pageItem.current
        currentEl.filter(el => {
            if (el) {
                if (currentEl.indexOf(el) !== page) {
                    if (el.className.includes("active")) {
                        console.log("yes is active", el.className.split(" ").filter(cl => cl != "active"));
                        el.className = el.className.split(" ").filter(cl => cl != "active").join(" ");
                    }
                }
                else {
                    el.className += " active"
                }
            }
            return el;
        });
        task && setShowTask(task?.slice(page, end || 10))

    }, [page]);

    return (
        <div className='pagination flex'>
            <p onClick={back} className='page-item'><RiArrowGoBackLine /></p>
            {[...Array(index).keys()].map(i => <p ref={el => pageItem.current[i] = el} className='page-item' key={i} onClick={() => setPage(i)}>{i + 1}</p>)}
            <p onClick={next} className='page-item'><RiArrowGoForwardLine /></p>
            <p>Page {pageIndex}/{index}</p>
        </div >
    )

}

export default Pagination